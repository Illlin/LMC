#instructions = {
#    "LDA": "5",     # Load the content from address to accumulator
#    "STA": "3",     # Store the accumulator to the address
#    "ADD": "1",     # Add the number at the address to the accumulator
#    "SUB": "2",     # Subtract the content of the address from the accumulator
#    "INP": "f001",  # Take user input
#    "OUT": "f002",  # Output accumulator
#    "HLT": "0000",  # Halt the program
#    "BRA": "6",     # Branch to address
#    "BRZ": "7",     # Branch if accumulator is zero
#    "BRP": "8",     # Branch if accumulator is positive or zero
#    "BRN": "9",     # Branch if accumulator is negitive
#    "BRD": "f008",  # Branch to the location specified in the ALU
#    "DAT": "",      # Data Storage
#    "PSH": "f003",  # Push accumulator to stack
#    "POP": "f004",  # Pop top of stack to accumulator
#    "PEK": "f005",  # Peak top of stack to accumulator
#    "ACC": "4",     # Set the acuumulator to the given value
#}

start   ACC cont
        PSH
        INP
        PSH
        INP
        PSH
        BRA muliply

cont    POP
        OUT
        HLT


# ---- MULTIPLY (a,b,address) ----
# Get user input for 2 numbers
muliply POP
        STA num1
        POP
        STA num2
        
# Sort to num1 is smallest
        SUB num1
        BRP multi
        BRA swap

# Swap num1 and num2
swap    LDA num1
        STA hold
        LDA num2
        STA num1
        LDA hold
        STA num2
        BRA multi

# Multiply num1 and num2
multi   LDA num1
        BRZ end
        SUB one
        STA num1
        LDA total
        ADD num2
        STA total
        BRA multi

end     POP
        STA num1
        LDA total
        PSH
        LDA num1
        BRD

one     DAT 1
zero    DAT 0
num1    DAT  
num2    DAT
hold    DAT
total   DAT